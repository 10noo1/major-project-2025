import pygame
import random
import time

# Initialize Pygame
pygame.init()

# Constants
SCREEN_WIDTH = 1200
SCREEN_HEIGHT = 800
FPS = 60

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
BLUE = (100, 150, 255)
GREEN = (100, 255, 100)
RED = (255, 100, 100)
YELLOW = (255, 255, 100)
PINK = (255, 150, 200)
ORANGE = (255, 180, 100)
PURPLE = (200, 100, 255)
BROWN = (139, 69, 19)
GRAY = (128, 128, 128)
LIGHT_GRAY = (200, 200, 200)
DARK_BLUE = (50, 100, 200)

# Game states
MENU = 0
PLAYING = 1
GAME_OVER = 2

class Ingredient:
    def __init__(self, name, color, x, y):
        self.name = name
        self.color = color
        self.rect = pygame.Rect(x, y, 120, 50)
        self.clicked = False

class Customer:
    def __init__(self, name, order, patience=30):
        self.name = name
        self.order = order  # List of ingredients
        self.patience = patience
        self.max_patience = patience
        self.satisfied = False
        self.served = False
        self.selected = False
        self.rect = pygame.Rect(0, 0, 280, 140)

class Drink:
    def __init__(self):
        self.ingredients = []
        self.completed = False

class Game:
    def __init__(self):
        self.screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
        pygame.display.set_caption("Alcholism Lament")
        self.clock = pygame.time.Clock()
        self.running = True
        self.state = MENU
        self.font = pygame.font.Font(None, 36)
        self.small_font = pygame.font.Font(None, 24)
        self.large_font = pygame.font.Font(None, 48)
        
        # Game variables
        self.score = 0
        self.lives = 5  # Starting lives
        self.customers = []
        self.current_drink = Drink()
        self.selected_customer = None
        self.customer_scroll = 0
        self.max_customers = 15
        self.customer_spawn_delay = 6000
        
        # Arrange ingredients in a 2x4 grid with better spacing
        self.ingredients_available = [
            Ingredient("Sprite", LIGHT_GRAY, 60, 390),
            Ingredient("Orange Juice", ORANGE, 200, 390),
            Ingredient("Cranberry", RED, 340, 390),
            Ingredient("Lime", GREEN, 480, 390),
            Ingredient("Mint", GREEN, 60, 460),
            Ingredient("Ginger Ale", YELLOW, 200, 460),
            Ingredient("Pineapple", YELLOW, 340, 460),
            Ingredient("Grenadine", PINK, 480, 460),
        ]
        
        # Mocktail recipes
        self.recipes = {
            "Virgin Mojito": ["Sprite", "Mint", "Lime"],
            "Shirley Temple": ["Sprite", "Grenadine"],
            "Virgin PiÃ±a Colada": ["Pineapple", "Sprite"],
            "Cranberry Spritzer": ["Cranberry", "Sprite", "Lime"],
            "Tropical Punch": ["Pineapple", "Orange Juice", "Grenadine"],
            "Ginger Fizz": ["Ginger Ale", "Lime", "Mint"],
            "Sunset Mocktail": ["Orange Juice", "Grenadine", "Pineapple"],
            "Citrus Blast": ["Lime", "Orange Juice", "Sprite"],
            "Berry Fizz": ["Cranberry", "Ginger Ale", "Mint"],
            "Tropical Mint": ["Pineapple", "Mint", "Lime"],
        }
        
        # UI elements
        self.serve_button = pygame.Rect(650, 390, 120, 50)
        self.clear_button = pygame.Rect(650, 460, 120, 50)
        
        # Timing variables
        self.time_played = 0
        
        # Generate first customers
        for _ in range(3):
            self.generate_customer()

    def generate_customer(self):
        # Only generate if we have less than 3 customers
        if len([c for c in self.customers if not c.served]) < 3:
            names = ["Alice", "Bob", "Charlie", "Diana", "Eve", "Frank", "Grace", "Henry", 
                    "Ivy", "Jack", "Kate", "Liam", "Mia", "Noah", "Olivia", "Paul", "Quinn", 
                    "Ruby", "Sam", "Tina", "Uma", "Victor", "Wendy", "Xander", "Yuki", "Zoe"]
            mocktails = list(self.recipes.keys())
            
            name = random.choice(names)
            drink_name = random.choice(mocktails)
            order = self.recipes[drink_name].copy()
            
            # Patience decreases as time goes on to increase difficulty
            base_patience = max(15, int(40 - (self.time_played // 30)))
            patience = random.randint(base_patience, base_patience + 20)
            
            customer = Customer(name, order, patience)
            customer.drink_name = drink_name
            self.customers.append(customer)
            
            # If this is the first customer, select them
            if len([c for c in self.customers if not c.served]) == 1:
                self.selected_customer = customer
                customer.selected = True

    def handle_events(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.running = False
            
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE and self.state == MENU:
                    self.state = PLAYING
                elif event.key == pygame.K_r and self.state == GAME_OVER:
                    self.restart_game()
            
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if self.state == PLAYING:
                    mouse_pos = pygame.mouse.get_pos()
                    
                    # Check customer selection
                    for i, customer in enumerate(self.customers):
                        if not customer.served:
                            visible_index = i - self.customer_scroll
                            if 0 <= visible_index < 3:  # Only check visible customers
                                x = 50 + visible_index * 320
                                y = 80
                                customer.rect = pygame.Rect(x, y, 280, 140)
                                
                                if customer.rect.collidepoint(mouse_pos):
                                    # Deselect previous customer
                                    if self.selected_customer:
                                        self.selected_customer.selected = False
                                    
                                    # Select new customer
                                    self.selected_customer = customer
                                    customer.selected = True
                                    break
                    
                    # Check ingredient clicks
                    for ingredient in self.ingredients_available:
                        if ingredient.rect.collidepoint(mouse_pos):
                            if ingredient.name not in self.current_drink.ingredients:
                                self.current_drink.ingredients.append(ingredient.name)
                    
                    # Check serve button
                    if self.serve_button.collidepoint(mouse_pos):
                        self.serve_drink()
                    
                    # Check clear button
                    if self.clear_button.collidepoint(mouse_pos):
                        self.current_drink = Drink()

    def serve_drink(self):
        if not self.current_drink.ingredients or not self.selected_customer:
            return
        
        if self.selected_customer.served:
            return
        
        # Check if the drink matches the selected customer's order
        if set(self.current_drink.ingredients) == set(self.selected_customer.order):
            # Perfect match
            self.selected_customer.satisfied = True
            self.selected_customer.served = True
            bonus = max(1, int(self.selected_customer.patience // 5))
            self.score += 100 + bonus
        else:
            # Wrong order - lose a life
            self.selected_customer.satisfied = False
            self.selected_customer.served = True
            self.lives -= 1
            self.score = max(0, self.score - 20)
            
            # Check if game over
            if self.lives <= 0:
                self.state = GAME_OVER
                return
        
        # Clear current drink
        self.current_drink = Drink()
        
        # Generate a new customer to replace the served one
        self.generate_customer()
        
        # Select next available customer
        self.select_next_customer()

    def select_next_customer(self):
        self.selected_customer = None
        for customer in self.customers:
            if not customer.served:
                self.selected_customer = customer
                customer.selected = True
                break

    def update(self):
        if self.state == PLAYING:
            self.time_played += 1/60  # Track time in seconds
            
            # Update customer spawn delay based on time (increases difficulty)
            self.customer_spawn_delay = max(1000, int(6000 - (self.time_played * 10)))
            
            # Update customer patience
            for customer in self.customers[:]:
                if not customer.served:
                    customer.patience -= 1/60  # Decrease patience over time
                    if customer.patience <= 0:
                        # Customer ran out of patience - lose a life
                        customer.served = True
                        customer.satisfied = False
                        self.lives -= 1
                        self.score = max(0, self.score - 50)
                        
                        # Check if game over
                        if self.lives <= 0:
                            self.state = GAME_OVER
                            return
                        
                        if customer == self.selected_customer:
                            self.select_next_customer()
                        # Replace the timed-out customer immediately
                        self.customers.remove(customer)
                        self.generate_customer()
                
                # Remove served customers after a short delay and replace them
                elif customer.served and customer.patience <= -1:
                    if customer == self.selected_customer:
                        self.selected_customer = None
                    self.customers.remove(customer)
                    self.generate_customer()
            
            # Auto-select customer if none selected
            if not self.selected_customer:
                self.select_next_customer()

    def draw_hearts(self):
        # Draw hearts to represent lives
        heart_size = 20
        heart_spacing = 25
        start_x = SCREEN_WIDTH - (self.lives * heart_spacing + 10)
        
        for i in range(self.lives):
            x = start_x + i * heart_spacing
            y = 20
            
            # Draw a simple heart shape using two circles and a triangle
            pygame.draw.circle(self.screen, RED, (x - 4, y - 2), heart_size//3)
            pygame.draw.circle(self.screen, RED, (x + 4, y - 2), heart_size//3)
            
            # Triangle for bottom of heart
            points = [
                (x - 8, y),
                (x + 8, y),
                (x, y + 10)
            ]
            pygame.draw.polygon(self.screen, RED, points)

    def draw_ingredient(self, ingredient, x, y, width=120, height=30):
        # Updated function to accept custom width and height
        pygame.draw.rect(self.screen, ingredient.color, (x, y, width, height))
        pygame.draw.rect(self.screen, BLACK, (x, y, width, height), 2)
        text = self.small_font.render(ingredient.name, True, BLACK)
        # Center the text in the rectangle
        text_rect = text.get_rect(center=(x + width//2, y + height//2))
        self.screen.blit(text, text_rect)

    def draw(self):
        self.screen.fill(WHITE)
        
        if self.state == MENU:
            title = self.large_font.render("MOCKTAIL MASTER", True, BLACK)
            self.screen.blit(title, (SCREEN_WIDTH//2 - title.get_width()//2, 200))
            
            start_text = self.font.render("Press SPACE to Start", True, BLACK)
            self.screen.blit(start_text, (SCREEN_WIDTH//2 - start_text.get_width()//2, 300))
            
            rules = [
                "Click on customers to select their order",
                "Click ingredients to add them to your drink",
                "Click SERVE to give the drink to selected customer",
                "You have 5 lives - lose one for wrong orders or timeouts!",
                "Game gets faster as you play - survive as long as you can!"
            ]
            
            for i, rule in enumerate(rules):
                text = self.small_font.render(rule, True, BLACK)
                self.screen.blit(text, (SCREEN_WIDTH//2 - text.get_width()//2, 400 + i * 30))
        
        elif self.state == PLAYING:
            # Draw title bar
            pygame.draw.rect(self.screen, BLUE, (0, 0, SCREEN_WIDTH, 60))
            score_text = self.font.render(f"Score: {self.score}", True, WHITE)
            speed_text = self.small_font.render(f"Speed: {(6000-self.customer_spawn_delay)//100}%", True, WHITE)
            
            self.screen.blit(score_text, (20, 15))
            self.screen.blit(speed_text, (200, 15))
            
            # Draw hearts for lives (no "Lives:" text)
            self.draw_hearts()
            
            # Draw customers (only show 3 at a time)
            unserved_customers = [c for c in self.customers if not c.served]
            visible_customers = unserved_customers[self.customer_scroll:self.customer_scroll + 3]
            
            for i, customer in enumerate(visible_customers):
                x = 50 + i * 320
                y = 80
                customer.rect = pygame.Rect(x, y, 280, 140)
                
                # Highlight selected customer
                border_color = DARK_BLUE if customer.selected else BLACK
                border_width = 4 if customer.selected else 2
                
                # Customer info box
                pygame.draw.rect(self.screen, LIGHT_GRAY, (x, y, 280, 140))
                pygame.draw.rect(self.screen, border_color, (x, y, 280, 140), border_width)
                
                # Customer name
                name_text = self.font.render(customer.name, True, BLACK)
                self.screen.blit(name_text, (x + 10, y + 5))
                
                # Order
                order_text = self.small_font.render(f"Wants: {customer.drink_name}", True, BLACK)
                self.screen.blit(order_text, (x + 10, y + 35))
                
                # Show ingredients needed
                for j, ingredient in enumerate(customer.order):
                    if j < 3:  # Only show first 3 ingredients to fit
                        ing_text = self.small_font.render(f"â€¢ {ingredient}", True, BLACK)
                        self.screen.blit(ing_text, (x + 10, y + 60 + j * 22))
                
                # Patience bar
                patience_ratio = customer.patience / customer.max_patience
                bar_width = 250
                bar_color = GREEN if patience_ratio > 0.5 else (YELLOW if patience_ratio > 0.25 else RED)
                pygame.draw.rect(self.screen, bar_color, (x + 10, y + 125, bar_width * patience_ratio, 10))
                pygame.draw.rect(self.screen, BLACK, (x + 10, y + 125, bar_width, 10), 1)
            
            # Draw current drink area (moved down to avoid overlap)
            pygame.draw.rect(self.screen, LIGHT_GRAY, (50, 250, 600, 80))
            pygame.draw.rect(self.screen, BLACK, (50, 250, 600, 80), 2)
            
            # Show drink title with selected customer's drink name
            if self.selected_customer:
                drink_title = self.font.render(f"Making: {self.selected_customer.drink_name}", True, BLACK)
            else:
                drink_title = self.font.render("Current Drink:", True, BLACK)
            self.screen.blit(drink_title, (60, 260))
            
            # Draw current drink ingredients with improved sizing (limited to 4 ingredients)
            for i, ingredient_name in enumerate(self.current_drink.ingredients[:4]):  # Only show first 4 ingredients
                x = 60 + i * 130  # Increased spacing to accommodate longer boxes
                y = 295
                # Find ingredient color and draw with new dimensions
                for ing in self.ingredients_available:
                    if ing.name == ingredient_name:
                        # Use longer width (120) and shorter height (30) for better text display
                        self.draw_ingredient(ing, x, y, width=120, height=30)
                        break
            
            # Draw ingredients in a contained box (moved down)
            pygame.draw.rect(self.screen, LIGHT_GRAY, (50, 350, 580, 180))
            pygame.draw.rect(self.screen, BLACK, (50, 350, 580, 180), 2)
            
            # Draw available ingredients title
            ingredients_title = self.font.render("Available Ingredients:", True, BLACK)
            self.screen.blit(ingredients_title, (60, 360))
            
            # Draw available ingredients in 2x4 grid
            for ingredient in self.ingredients_available:
                pygame.draw.rect(self.screen, ingredient.color, ingredient.rect)
                pygame.draw.rect(self.screen, BLACK, ingredient.rect, 2)
                text = self.small_font.render(ingredient.name, True, BLACK)
                text_rect = text.get_rect(center=(ingredient.rect.centerx, ingredient.rect.centery))
                self.screen.blit(text, text_rect)
            
            # Draw buttons
            pygame.draw.rect(self.screen, GREEN, self.serve_button)
            pygame.draw.rect(self.screen, BLACK, self.serve_button, 2)
            serve_text = self.font.render("SERVE", True, BLACK)
            serve_rect = serve_text.get_rect(center=self.serve_button.center)
            self.screen.blit(serve_text, serve_rect)
            
            pygame.draw.rect(self.screen, RED, self.clear_button)
            pygame.draw.rect(self.screen, BLACK, self.clear_button, 2)
            clear_text = self.font.render("CLEAR", True, BLACK)
            clear_rect = clear_text.get_rect(center=self.clear_button.center)
            self.screen.blit(clear_text, clear_rect)
        
        elif self.state == GAME_OVER:
            game_over_text = self.large_font.render("GAME OVER", True, RED)
            self.screen.blit(game_over_text, (SCREEN_WIDTH//2 - game_over_text.get_width()//2, 200))
            
            no_lives_text = self.font.render("You ran out of lives!", True, BLACK)
            self.screen.blit(no_lives_text, (SCREEN_WIDTH//2 - no_lives_text.get_width()//2, 280))
            
            final_score = self.font.render(f"Final Score: {self.score}", True, BLACK)
            self.screen.blit(final_score, (SCREEN_WIDTH//2 - final_score.get_width()//2, 320))
            
            restart_text = self.font.render("Press R to Restart", True, BLACK)
            self.screen.blit(restart_text, (SCREEN_WIDTH//2 - restart_text.get_width()//2, 380))
        
        pygame.display.flip()

    def restart_game(self):
        self.score = 0
        self.lives = 5  # Reset lives
        self.customers = []
        self.current_drink = Drink()
        self.selected_customer = None
        self.customer_scroll = 0
        self.time_played = 0
        self.customer_spawn_delay = 6000  # Reset spawn delay
        
        # Generate first customers
        for _ in range(3):
            self.generate_customer()
        
        self.state = PLAYING

    def run(self):
        while self.running:
            self.handle_events()
            self.update()
            self.draw()
            self.clock.tick(FPS)
        
        pygame.quit()

if __name__ == "__main__":
    game = Game()
    game.run()
